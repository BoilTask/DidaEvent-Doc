<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DidaEvent</title><link>/</link><description>Recent content on DidaEvent</description><generator>Hugo</generator><language>en</language><copyright>Copyright (c) 2020-2024 Thulite</copyright><lastBuildDate>Sun, 03 Nov 2024 12:00:00 +0000</lastBuildDate><atom:link href="/index.xml" rel="self" type="application/rss+xml"/><item><title>Introduction</title><link>/docs/overview/introduction/</link><pubDate>Sun, 03 Nov 2024 12:00:00 +0000</pubDate><guid>/docs/overview/introduction/</guid><description>&lt;h2 id="system-overview">System Overview&lt;/h2>
&lt;p>This is a mechanism that allows specific actions to be executed at designated times, typically including components such as event sources, event listeners, and event dispatchers.&lt;/p></description></item><item><title>Install</title><link>/docs/overview/install/</link><pubDate>Sun, 03 Nov 2024 12:00:00 +0000</pubDate><guid>/docs/overview/install/</guid><description>&lt;h2 id="purchase">Purchase&lt;/h2>
&lt;p>You can purchase it on the &lt;a href="https://www.unrealengine.com/marketplace/en-US/product/didaevent">Unreal Engine Marketplace&lt;/a>.&lt;/p></description></item><item><title>Changelog</title><link>/docs/overview/changelog/</link><pubDate>Sun, 03 Nov 2024 12:00:00 +0000</pubDate><guid>/docs/overview/changelog/</guid><description>&lt;h2 id="100">1.0.0&lt;/h2>
&lt;p>Uploaded the basic implementation version.&lt;/p>
&lt;ul>
&lt;li>Provided event definition&lt;/li>
&lt;li>Provided event broadcast&lt;/li>
&lt;li>Provided event listening&lt;/li>
&lt;li>Provided channel mechanism&lt;/li>
&lt;/ul></description></item><item><title>Quick Start</title><link>/docs/tutorial/quick/</link><pubDate>Sun, 03 Nov 2024 12:00:00 +0000</pubDate><guid>/docs/tutorial/quick/</guid><description>&lt;p>With the following steps, we can quickly define and use an event.&lt;/p>
&lt;h2 id="define-an-event">Define an Event&lt;/h2>
&lt;p>To create an event, we need to define a subclass based on &lt;code>UDidaEvent&lt;/code>, which can be a &lt;code>C++&lt;/code> class or a blueprint class.&lt;/p></description></item><item><title>Invoke Event</title><link>/docs/concept/invoke/</link><pubDate>Sun, 03 Nov 2024 12:00:00 +0000</pubDate><guid>/docs/concept/invoke/</guid><description>&lt;p>The following nodes are available for triggering events:&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Node Name&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>DidaInvokeEvent&lt;/td>
 &lt;td>The most commonly used event trigger node; also used to access the EventSubsystem&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>For example, you can use the &lt;code>DidaInvokeEvent&lt;/code> node directly within a blueprint.&lt;/p></description></item><item><title>Listening to Events</title><link>/docs/concept/listener/</link><pubDate>Sun, 03 Nov 2024 12:00:00 +0000</pubDate><guid>/docs/concept/listener/</guid><description>&lt;h2 id="listening-methods">Listening Methods&lt;/h2>
&lt;p>Currently, the following options are available for event listeners:&lt;/p>
&lt;table>
 &lt;thead>
 &lt;tr>
 &lt;th>Type&lt;/th>
 &lt;th>Description&lt;/th>
 &lt;/tr>
 &lt;/thead>
 &lt;tbody>
 &lt;tr>
 &lt;td>DidaEventListenerComponent&lt;/td>
 &lt;td>Can be added to any object that allows components, listens for events at BeginPlay based on configuration.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>DidaEventListenerWidget&lt;/td>
 &lt;td>Can be added to any widget-supporting object, listens for events at Construct based on configuration.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>DidaEventListenerVariable&lt;/td>
 &lt;td>A versatile listener that can be placed anywhere and requires manual function calls to bind listeners.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>DidaEventMultiListenerComponent&lt;/td>
 &lt;td>Similar to DidaEventListenerComponent, but allows for multiple event listeners.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>DidaEventMultiListenerWidget&lt;/td>
 &lt;td>Similar to DidaEventListenerWidget, but allows for multiple event listeners.&lt;/td>
 &lt;/tr>
 &lt;tr>
 &lt;td>DidaEventMultiListenerVariable&lt;/td>
 &lt;td>Similar to DidaEventListenerVariable, but allows for multiple event listeners.&lt;/td>
 &lt;/tr>
 &lt;/tbody>
&lt;/table>
&lt;p>For example, you can create a listener using &lt;code>CreateListenerVariable&lt;/code>.&lt;/p></description></item><item><title>Event Channel</title><link>/docs/concept/channel/</link><pubDate>Sun, 03 Nov 2024 12:00:00 +0000</pubDate><guid>/docs/concept/channel/</guid><description>&lt;h2 id="mechanism-overview">Mechanism Overview&lt;/h2>
&lt;p>To address cases where some listeners do not need to respond to all triggers of a specific event, a channel mechanism is introduced.&lt;/p></description></item><item><title>Event Payload</title><link>/docs/concept/payload/</link><pubDate>Sun, 03 Nov 2024 12:00:00 +0000</pubDate><guid>/docs/concept/payload/</guid><description>&lt;h2 id="basic-usage">Basic Usage&lt;/h2>
&lt;p>The payload is used to carry additional parameters when an event is triggered. It is defined by inheriting from &lt;code>UDidaEventPayload&lt;/code>.&lt;/p></description></item></channel></rss>